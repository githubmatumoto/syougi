-------------------------------------------------------------

コンピュータ将棋のコマの標準的な表し方(?)

http://www2.computer-shogi.org/protocol/record_v2.html

>  駒名:歩から玉まで:FU,KY,KE,GI,KI,KA,HI,OU 
>  上の成駒:TO,NY,NK,NG, UM,RY 
>  位置:1一を"11"、5一を"51"、9九を"99"というふうに、2桁の数字で表す。 
>  駒台は"00"とする。 
>  先手(下手)は"+"、後手(上手)は"-"を付ける。 

>
> P1-KY-KE-GI-KI-OU-KI-GI-KE-KY
> P2 * -HI *  *  *  *  * -KA *
> P3-FU-FU-FU-FU-FU-FU-FU-FU-FU
> P4 *  *  *  *  *  *  *  *  *
> P5 *  *  *  *  *  *  *  *  *
> P6 *  *  *  *  *  *  *  *  *
> P7+FU+FU+FU+FU+FU+FU+FU+FU+FU
> P8 * +KA *  *  *  *  * +HI *
> P9+KY+KE+GI+KI+OU+KI+GI+KE+KY






--旧版の README.txt --

利かずの駒並べ

エイトクイーンを将棋にあてはめたようなパズルで駒４０枚を全て置く。

-------------------

* 将棋の位置表現 ->将棋オリジナル 

9,8,7,6,5,4,3,2,1
-----------------+
                 | 一
                 | 二
                 | 三
                 | 四
                 | 五
                 | 六
                 | 七
                 | 八
                 | 九
-----------------+

--------------------
* PC上の位置表現 -> PC表現(X,Y)

将棋の盤面の 
「1一」はX=8, Y=8, 
「1九」はX=0, Y=8, 
「9一」はX=8, Y=0, 
「9九」はX=0, Y=0, 


X軸
-+---------+
8|         |
7|         |
6|         |
5|         |
4|         |
3|         |
2|         |
1|         |
0|         |
-+---------+
 |012345678| Y軸


----------

*拡張盤の位置表現  -> 拡張盤(Xe,Ye)

拡張盤で、上下左右に8個の盤を作る。

  +-------------------------+-----------------+
24|                         |16,
23|                         |15,
22|                         |14,
21|                         |13,
20|                         |12,
19|                         |11,
18|                         |10,
17|                         | 9,
  +-------------------------+-----------------+
16|                         | 8,
15|                         | 7,
14|                         | 6,
13|                         | 5,
12|                         | 4,
11|                         | 3,
10|                         | 2,
 9|                         | 1,
 8| -8,-7,-6,-5,-4,-3,-2,-1 | 0,1,3,4,5,6,7,8 |  9,10,11,12,13,14,15,16
--|                         +-----------------+
 7|                         |-1
 6|                          -2
 5|                          -3
 4|                          -4
 3|                          -5
 2|                          -6
 1|                          -7
 0|                          -8
  +--------------------------------------------------------------------- 

将棋オリジナル  -> PC表現(X,Y)  -> 拡張盤(Xe,Ye)
「1一」         -> X=8, Y=8 -> Xe=16, Ye=16
「1九」         -> X=0, Y=8 -> Xe=8 , Ye=16
「9一」         -> X=8, Y=0 -> Xe=16, Ye=8
「9九」         -> X=0, Y=0 -> Xe=8 , Ye=8 

Xe = X + 8 
Ye = Y + 8 

OFFSET = 25 = 8 + 9 + 8
配列: OFFSET x OFFSET = 25 x 25 = 625

----------
実際は一次元配列を使う。

  Ye * OFFSET + Xe
  (Y+8) * OFFSET + (X+8)

   -> 拡張盤(array)

PC表現の一次元配列表現
   -> PC表現(array)

  Y * SIZE + X

------------

* 拡張盤e2(Xe2,Ye2)

拡張盤で、上下左右に4個の盤を作る。
拡張をすくなくする。
上下は4マス、左右は８マス。

  +-------------------------+-----------------+
16|                         |12,
15|                         |11,
14|                         |10,
13|                         | 9,
  +-------------------------+-----------------+
12|                         | 8,
11|                         | 7,
10|                         | 6,
 9|                         | 5,
 8|                         | 4,
 7|                         | 3,
 6|                         | 2,
 5|                         | 1,
 4| -8,-7,-6,-5,-4,-3,-2,-1 | 0,1,3,4,5,6,7,8 |  9,10,11,12
--|                         +-----------------+
 3|                          -1
 2|                          -2
 1|                          -3
 0|                          -4
  +-------------------------+-----------------+

OFFSET = SIZE + SIZE/2 + SIZE/2 = 9 + 4 + 4 = 17

将棋オリジナル  -> PC表現(X,Y)  -> 拡張盤e2(Xe2,Ye2)
「1一」         -> X=8, Y=8 -> Xe2=12, Ye2=12
「1九」         -> X=0, Y=8 -> Xe2=4 , Ye2=12
「9一」         -> X=8, Y=0 -> Xe2=12, Ye2=4
「9九」         -> X=0, Y=0 -> Xe2=4 , Ye2=4

Xe2 = X + 4 
Ye2 = Y + 4 

OFFSET = 17 = 9 + 4 + 4
配列: OFFSET x OFFSET = 17 x 17 = 289

実際は一次元配列を使う。

アドレス計算をやさしくするために、

  Xe2=-4, Ye2=0

を始点にする。もちろんマイナスが発生するのでその分の配列の始点をずらし
ておく。

  Ye2 * OFFSET + Xe2
  (Y+4) * OFFSET + (X+4)

   -> 拡張盤e2(array)

PC表現の一次元配列表現
   -> PC表現(array)

  Y * SIZE + X

------------
*飛車の鏡像排除

普通に順列生成すると、 
  -> 飛車2枚、空白79枚を置く順列
  -> 81! / (2! 79!) = 3240通り

これには鏡像が含まれる。

**盤面の分割

----------
A  |C|  B
----------

A: Y=0 から3 -> 36マス
C: Y=4 -> 9マス
B: Y=5 から 8 -> 36マス

場合分け:

1. A, A -> Aに飛車を2枚置く
2. A, B -> Aに飛車を1枚, Bに飛車を1枚 置く
3. A, C -> Aに飛車を1枚, Cに飛車を1枚 置く
4. C, C -> Cに飛車を2枚置く (利き筋なので無効)

で、

1.は,Aに駒を2枚置く組み合わせ
  -> 飛車2枚、空白34枚を置く順列
  -> 36! / (2! * 34!) = 630通り
   -> gen_kumi_hisya() の step1_pos

2.は,
  まず、Aに駒を1枚置く組み合わせ
   -> 36通り

   36個の要素から2個とりだす組み合わせ 
    nCr(36,2) = Binomial[36,2] = 630通り

   AとBの同じ位置に駒を置く組み合わせ(駒の影響から成立しないが)
    36通り

   -> gen_kumi_hisya() の step2_pos

3.  まず、Aに駒を1枚置く組み合わせ
   -> 36通り
 
    Cに駒を1枚置く組み合わせ
   -> 9通り
  
  まとめると組み合わせは
   -> 36 * 9 = 324

   -> gen_kumi_hisya() の step3_pos

4.は(駒の影響から成立しないが)
  -> 飛車2枚、空白7枚を置く順列
  ->  9! / (2! 7!) = 36通り

合計:
  1. + 2. + 3. + 4. = 630 + 630 + 36 + 324 + 36 = 1656通り

**別のアプローチより試し算

> ABC DEF GHI
と書いたら
実際は
> ABC
> DEF
> GHI

と置いてあるとする。


3x2マス
6! / (2! * 4!) = 15通り

 1. 110 000 -> 6
 2. 101 000 UNIQ
 3. 100 100 -> 12
 4. 100 010 -> 11
 5. 100 001 -> 10
 6. 011 000 <-1
 7. 010 100 -> 9
 8. 010 010 UNIQ 
 9. 010 001 <- 7
10. 001 100 <- 5
11. 001 010 <- 4
12. 001 001 <- 3
13. 000 110 -> 15
14. 000 101 UNIQ
15. 000 011 <- 13

鏡像を除いた数 = (順列の数 + UNIQの数)/2  = (15 + 3)/2 = 9

鏡像を外すと
　15 - 6 = 9通り

3x3マス

9! / (2! * 7!) = 36通り

---
01. 110 000 000 -> 09
02. 101 000 000 UNIQ
03. 100 100 000 -> 18
04. 100 010 000 -> 17
05. 100 001 000 -> 16

06. 100 000 100 -> 21
07. 100 000 010 -> 20
08. 100 000 001 -> 19
09. 011 000 000 <- 01
10. 010 100 000 -> 12

11. 010 010 000 UNIQ
12. 010 001 000 <- 10
13. 010 000 100 -> 15
14. 010 000 010 UNIQ
15. 010 000 001 <- 13

16. 001 100 000 <- 05
17. 001 010 000 <- 04
18. 001 001 000 <- 03
19. 001 000 100 <- 08
20. 001 000 010 <- 07

21. 001 000 001 <- 06
22. 000 110 000 -> 27
23. 000 101 000 UNIQ
24. 000 100 100 -> 33
25. 000 100 010 -> 32

26. 000 100 001 -> 31
27. 000 011 000 <- 22
28. 000 010 100 -> 30
29. 000 010 010 UNIQ
30. 000 010 001 <- 28

31. 000 001 100 <- 26
32. 000 001 010 <- 25
33. 000 001 001 <- 24
34. 000 000 110 -> 36
35. 000 000 101 UNIQ

36. 000 000 011 <- 34
----

  鏡像の数 = (順列の数 - UNIQの数)/2

よって、鏡像を除いた数は

順列の数 - (順列の数 - UNIQの数)/2 = (順列の数 + UNIQの数)/2

(36 + 6 ) / 2 = 21

**立式

横Aマス、縦Bマスで、Aが奇数として

A>=3, B>=2

駒を２枚置いた時の左右同じ位置においた場合。つまり鏡像。

横側1列のみに駒を置いた時の鏡像数 = (A-1)/2

縦Bマスあるので

  B * (A-1)/2

Aのまんなかの縦のみに２枚置いた時の順列の数。まんなかに
置くとかならず鏡像

  B! / ((B-2)! 2!)


よって

 鏡像を除いた数 = (順列の数 + UNIQの数)/2

                = ((A*B)! / ((A*B-2)! * 2!) + B * (A-1)/2 +  B! / ((B-2)! 2!))/2


A=3, B=2で試し算
　　(6! / (4! 2!) + 2 * (2)/2 + 2! / (0! 2!))/2
    (15 + 2 + 1) / 2
    18 / 2 = 9 -> 正解

A=3, B=3で試し算

     (9! / (7! 2!) + 3 * 2/2 + 3! / (1! 2!))/2 = 21

A=9, B=9で試し算
     (81! / (79! 2!) + 9 * 8 / 2 + 9! / (7! 2!))/2 = 1656


  -> 前述の盤面からの計算と同じ！！



**盤面の分割/後手有り

鏡像(左右および上下)と180度回転を考慮して場合わけ。

---------
G  |H|  I
---------
D  |E|  F
---------
A  |B|  C
---------

A: X=0 から3, Y=0 から3 -> 16マス
B: X=0 から3, Y=4 -> 4マス
C: X=0 から3, Y=5から8 -> 16マス
D: X=4, Y=0 から3 -> 4マス
E: X=4, Y=4 -> 1マス
F: X=4, Y=5から8 -> 4マス
G: X=5 から8, Y=0 から3 -> 16マス
H: X=5 から8, Y=4 -> 4マス
I: X=5 から8, Y=5から8 -> 16マス

場合分け:

1.  A, A -> UNIQ
2.  A, B -> UNIQ
3.  A, C -> UNIQ
4.  A, D -> UNIQ
5.  A, E -> UNIQ
6.  A, F -> UNIQ
7.  A, G -> UNIQ
8.  A, H -> UNIQ
9.  A, I -> UNIQ

10. B, B -> UNIQ -> 利き筋なので無効
11. B, C -> A, B
12. B, D -> UNIQ
13. B, E -> UNIQ -> 利き筋なので無効
14. B, F -> B, D
15. B, G -> UNIQ
16. B, H -> UNIQ
17. B, I -> UNIQ

18. C, C -> A, A 
19. C, D -> A, F
20. C, E -> A, E
21. C, F -> A, D
22. C, G -> A, I
23. C, H -> A, H
24. C, I -> A, G

25. D, D -> UNIQ -> 利き筋なので無効
26. D, E -> UNIQ -> 利き筋なので無効
27. D, F -> UNIQ -> 利き筋なので無効
28. D, G -> A, D
29. D, H -> B, D
30. D, I -> C, D

31. E, E -> UNIQ -> マスが１個なので無効
32. E, F -> D, E -> 利き筋なので無効
33. E, G -> A, E
34. E, H -> B, E -> 利き筋なので無効
35. E, I -> A, E

36. F, F -> D, D -> 利き筋なので無効
37. F, G -> A, F
38. F, H -> B, D
39. F, I -> A, D

40. G, G -> A, A
41. G, H -> A, B
42. G, I -> A, C

43. H, H -> B, B -> 利き筋なので無効
44. H, I -> A, B

45. I, I -> A, A

で、有効なのは、
1.  A, A -> UNIQ
2.  A, B -> UNIQ
3.  A, C -> UNIQ
4.  A, D -> UNIQ
5.  A, E -> UNIQ
6.  A, F -> UNIQ
7.  A, G -> UNIQ
8.  A, H -> UNIQ
9.  A, I -> UNIQ

10. B, B -> UNIQ -> 利き筋なので無効
12. B, D -> UNIQ
13. B, E -> UNIQ -> 利き筋なので無効
15. B, G -> UNIQ
16. B, H -> UNIQ -> 利き筋なので無効
17. B, I -> UNIQ

25. D, D -> UNIQ -> 利き筋なので無効
26. D, E -> UNIQ -> 利き筋なので無効
27. D, F -> UNIQ -> 利き筋なので無効

31. E, E -> UNIQ -> マスが１個なので無効


1.は,Aに駒を2枚置く組み合わせ
  -> 飛車2枚、空白14枚を置く順列
  -> 16! / (2! * 14!) = 120通り
   -> gen_kumi_hisya() の step1_pos

2-9.は,
  まず、Aに駒を1枚置く組み合わせ
   -> 16通り

  次に、
  B,C,D,E,F,G,H,Iに1枚置く組み合わせ
　 -> 81 - 16 = 65通り

  -> 16 * 65 = 1040通り

   -> gen_kumi_hisya() の step2_pos

3.  まず、Aに駒を1枚置く組み合わせ
   -> 36通り
 
    Cに駒を1枚置く組み合わせ
   -> 9通り
  
  まとめると組み合わせは
   -> 36 * 9 = 324

   -> gen_kumi_hisya() の step3_pos

4.は(駒の影響から成立しないが)
  -> 飛車2枚、空白7枚を置く順列
  ->  9! / (2! 7!) = 36通り

合計:
  1. + 2. + 3. + 4. = 630 + 630 + 36 + 324 + 36 = 1656通り



------------

TODO
- コマのあるなしのBIT演算に落とせるのでは？
  9*9 = 81
  32bit * 3 = 96bit -> 12byte
  64bit * 2 = 128bit -> 16byte  -> uint128_t

- 残りのEMPTYより残り駒の数が多くなったら検索中止
  -> 実装済み

- 左右対称を考慮
  -> 実装済み

- アドレス計算が大変すぎる。
  2の累乗の大きさにして、9x9の回りにEFFECTの枠を作るだけで十分では

- 飛車角を先に置かない場合は、駒の存在チェックは左側だけで良い。
 -> 自分で書いて意味不明

- 通常
       銀 -> 桂馬 -> 歩  
とおくが、次の順番で置き、
      桂馬 -> 銀 -> 歩
銀の下に歩は置けないので、最初からEFFECTのフラグを付けておく
   search20.cc -> 遅い

- 残りマスのカウントのバグ
search5以降

歩を置く時に、無条件に下から置いているので、

以下の盤面で

下→上
□□■駒

歩を1番めに置いた時

歩■■駒 -> 空きマス無し

歩を2番めに置いた時

□歩■駒 -> 空きマス１個

----
と空きマスが過少報告される。search5以降は2番めに置く事が無い。
40駒の追加の駒が置ける可能性を調べていない事になる。




並列化の方針:
飛車 x2  -> 角 x2 -> 王 x 2 -> 各タスクに並列化

--------------

index.htmlで4.芝刈りの飛車x2,角x2の時の残りのマスは
search2.ccで

    Youso youso = hisya_2_kaku_2_youso; // See: sample.h

の出力結果を以下の方法で調査。
 ./search2 > log2.txt

grep FOUND log2.txt  | awk -F, '{print $3}' | sort | uniq -c
    128  masu_nokori=27
    640  masu_nokori=28
   2076  masu_nokori=29
   5488  masu_nokori=30
  17572  masu_nokori=31
  32184  masu_nokori=32
  70680  masu_nokori=33
 109488  masu_nokori=34
 175824  masu_nokori=35
 222496  masu_nokori=36
 254160  masu_nokori=37
 218504  masu_nokori=38
 148528  masu_nokori=39
  57752  masu_nokori=40
  13872  masu_nokori=41
   2248  masu_nokori=42
    280  masu_nokori=43
      4  masu_nokori=45


-----------------

--
関数一覧:

注意:search5,6,7,8,35,36,37,38は最後は必ず歩である必要がある。
    また歩をきちんと置いてないので、数が間違っている可能性あり。特に残りマスの判断が微妙。

search.cc: プロトタイプ

search2.cc: 残りマスをカウントし、残り駒より少なくなったら探索をしない。
           sarch4以降は歩を例外処理しているため、きちんとした盤面がprintされない。
　　　　　　表示用のデータを作るなら、search2を使う。

# search3.cc: アドレス計算省略のため、拡張盤(array)を主に計算する。
#            -> 通常より、遅かった。。

# search4.cc: search2.ccと比較して、歩を例外扱い。最後の要素がかならず歩
# 	    である必要がある。歩は順列生成をして置いていかない。置ける
# 	    所にどんどん置いていって、残りますが無くなったらあきらめる。
# 	    歩を置いている時にbest_koma_nokoriが更新されても !!NEW!!と
# 	    表示されない。

search5.cc: search4.ccとほぼ同じだが、表示を変更

search6.cc: 飛車の鏡像を生成しない。飛車がかならず最初の要素である必要
            がある。

search7.cc: 歩を置いている段階で、EMPTYに歩を置く時に失敗してもマスの
            残りを減らす(masu_nokori--をする。)

             sarch6.ccに比べて駒を置くのを諦めるのが早くなるので、
             同じ升目までの調査でもbest_koma_konoriは少い数字が報告される。

search8.cc: search7.ccと比較して、歩を置いている関数をfor loopに展開す
           る。歩を置いてもclass Boardを直接更新しない。

# search20.cc: search8.ccと比較して、通常
# 	       銀 -> 桂馬 -> 歩  
# 	    とおくが、次の順番で置き、
# 	       桂馬 -> 銀 -> 歩
# 	     銀の下に歩は置けないので、最初からEFFECTのフラグを付けておく
# 		 -> 遅い

search9:	 search8のgen_ku_pre_fuのループをちょっと改善


search10:  search6の飛車の鏡面生成をしないルーチン + search2(歩を特殊処理しない)
            後から必要になったので、飛び番号。
	   
search32.cc  search2と同じで後手対応 (実際はseaech2と同じ物)
search36.cc: search6と同じで後手対応,後手の鏡面や180度回転などを生成しない。
search37.cc: search7と同じで, 同上
search38.cc: search8と同じで, 同上
search39.cc: search9と同じで, 同上
search40.cc: search10と同じで, 同上


BoardBit/search.cc
 -> TODO作成中: bitmaskを使うタイプ。マス残りのカウントがむずかしいので遅いかも。

-------------

conv_printable.pl
  データ公開用に余計なデータを消す。

count_komaiti.pl
　動かない駒の位置を集計して表示

count_komaiti2.pl
　動かない駒の位置を集計して表示
  但し、大駒のみ別扱いして、大駒の位置が動いたら、その時点で表示して、集計を初期化する。

-------------
sh time_test.sh
  search6以降で -DTIME_TEST を定義して測定
  -> 香車無し
  -> 後手無し: 飛車を左側1列(y=0,x=0,1,2,8)と2列目で1つ(y=1,x=0)の合計10枚のみ並べる。

定義(defin): -D -DTIME_TEST -DPRINT_FU
定義(undef): -DGEN_GOTE, 
Youso youso = kyou_nashi_youso

search6: 3m34s
search7: 3m15s
search8: 2m36s

sh time_test-gote.sh
  search36以降で -DTIME_TEST を定義して測定
  -> 香車無し
  -> 後手あり: 飛車を(y=0,x=0,1,2,3)と(y=4,x=0,1,2,3)のみ並べる

定義(defin): -D -DTIME_TEST -DPRINT_FU -DGEN_GOTE -DMASU_NOKORI
Youso youso = kyou_nashi_youso

search36 (実行中) --> 1日たってもおわらん。
search37
search38 


sh time_test.sh
  search6以降で -DTIME_TEST2 を定義して測定
  -> 香車無し
  -> 飛車角すでに並べた

g++-4.8.1
定義(defin): -D -DTIME_TEST2 -DPRINT_FU
定義(undef): -DGEN_GOTE
Youso youso = kyou_nashi_youso

-gcc (4.4)
search6: 13s
search7: 10s
search8: 7s
-g++-4.8.1
search6: 13s
search7: 10s
search8: 6s
search9: 5s


sh time_test.sh
  search6以降で -DTIME_TEST2 -DPRINT_FU を定義して測定
  -> 香車有り
  -> 飛車角すでに並べた

定義(defin): -D -DTIME_TEST2 -DPRINT_FU
定義(undef): -DGEN_GOTE
Youso youso = org_last_kyou_fu_youso

search6: 1m49s
search7: 1m48s
search8: 1m46s

ayu64:
search6: 1m38s
search7: 1m38s
search8: 1m36s
search9: 1m39s


---
参考文献
http://d.hatena.ne.jp/mozuyama/20050710/P20050710KIKI
勝手に将棋トピックス / 2005年07月10日/ [詰将棋] 利きのぶつからない配置（続々)

追加分は
DOC/MEMO.txt

----
H25/4/20

rev:
http://www.ktr.to/Game/Java/kaisetsu.html
こちらの機能を追加。

 -DKANRYAKU
  
駒動きの確認で、新、旧とも、ISHIの再確認、

---
H25/4/21

gen_kumi_hisyaの鏡像排除のコードがエンバグしていた。　
　-> 修正済み

TODO:
おそらくgen_kumi_hisya2もバグってる。再検討

-> 配列で参照する方法で修正(4/23)
---

---
TODO:
以下の条件で -DMASU_LIMIT=0, -DMASU_NOKORI
------
leng = 81
koma = 36
masu limit = 0
後手有り。表示の都合で以下のように表記
> 後手/香 :京, 後手/金 :琴, 後手/銀 :吟, 後手/桂 :軽, 後手/歩 :符
> その他の駒は先手後手で表示区別無し。
Koma list Comment: 簡略版/飛車角/石x0/歩x32/MASU_LIMIT=4/簡略版
koma list = 飛x2, 角x2, 歩x32, □x45,
---------

とかする。石を置く代わりに空きマスでやってみたような感じです。

以下のような面白い答えが出てくる。


%%FOUND, no = 8, masu_nokori=1
+------------------+
|歩 1歩歩歩歩歩 1□|
| 2 2 2 2 2 2 2飛 2|
|歩 1歩歩歩歩歩 1歩|
| 3飛 2 1 2 1 2 2 3|
|歩 2歩 1歩 1歩 2歩| <- この列に歩が２枚足りない
| 2 1 2歩 1歩 2 1 2| <- この列に空き駒(桂馬)が無い
|歩 2歩 2歩 2歩 2歩|
| 1 1 2歩 3歩 2 1 1| <- この列に空き駒(桂馬)が無い
|歩 1歩角歩角歩 1歩|
+------------------+

-------

TODO:
駒を最初から数枚並べるため、preset系の関数
  preset_koma.c に追加

----
参考文献追加(2016/1/5)

https://teratail.com/questions/18586
将棋の駒の配置問題
